lec 6 02/05

Outline: SQL
    Aggregation
        Aggregate operators
        GROUP BY
        HAVING
    Nulls
    Outer Joins
    Views


Aggregation
    SUM, AVG, COUNT, MIN, MAX can be applied to a column in a SELECT lause to 
    produce the aggregation on the column
        COUNT(*) counts the number of tuples
        COUNT(DISTINCT <attribute>) removes duplicates

    If the SELECT clause uses an aggregate operation, it must use ONLY aggregate 
    operations unless the query contains a GROUP BY

    e.g., find the name and age of the oldest sailors
        incorrect version
            select  s.name, max(s.age)
            from    sailors s;

        correct version
            select s.name, s.age
            from    sailors s
            where   s.age = (select max(s2.age)
                             from   sailors s2);
    
    GROUP BY
        We may follow a SELECT-FROM-WHERE expression by GROUP BY and a list of 
        attributes.
        The relation is then grouped according to the vals of those attributes, 
        and any aggregation is applied only within each group.
            e.g.    select   count(*), s.rating
                    from     sailors s
                    group by s.rating;

      * Restrictions
            If any aggregation is used, then each element of the SELECT list 
            must be either:
                aggregated
                an attribute on the GROUP BY list

    GROUP BY + HAVING
        The HAVING clause always follows a GROUP BY clause in a SQL query
            [HAVING applies ONLY on aggregates]
            It applies to each group, and groups not satisfying the condition 
            are removed
            It can refer only only to attributes of relations in the FROM clause 
            as long as attribute makes sense within a group
    
    Syntax
        SELECT   [DISTINCT] exp1, exp2, ...
        FROM     R, S, T
        WHERE    C1
        GROUP BY attributes
        HAVING   C2
        ORDER BY attribute ASC/DESC
        LIMIT    N;

    Conceptual evaluation
        Compute the FROM-WHERE part, obtain a table with all attributes in R, S, T
        Group the attributes in the GROUP BY
        Compute the aggregates and keep only groups satisfying condition in HAVING
        ORDER BY attributes specified in ORDER BY
        LIMIT the output if specified


Null Values
    Tuple in SQL relations can have NULL as a value for one or more attributes
    The meaning depends on context
        Missing value (e.g., Greece has some population, but we dont know what it is)
        Inapplicable (e.g., the value of spouse for an unmarried person)

    NULL Propagation
        When we do arithmetic operations using NULL, the result is again a NULL
        e.g.
            (10*x)+5 returns NULL if x=NULL
            NULL/0 returns NULL
        String concatention also results in NULL when one of the operands is NULL
        e.g.
            'Wisconsin' || NULL || 'Madison' returns NULL

    Comparisons with NULL
        The logic of conditions in SQL is 3-valued logic
            TRUE    = 1
            FALSE   = 0
            UNKNOWN = 0.5

        When any value is compared with a NULL, the result is UNKNOWN
            e.g., x>5 is UNKNOWN if x=NULL

        A query produces a tuple in the answer only if its truth value in the 
        WHERE clause is TRUE=1

    3-Valued Logic
        The truth value of a WHERE clause is computed as follow:
            C1 AND C2   ->  min{value(C1), value(C2)}
            C1 OR C2    ->  max{value(C1), value(C2)}
            NOT C       ->  1 - value(C)
    
    Complication
        Query will not count rows with NULL
            SELECT COUNT(*)
            FROM Country
            WHERE IndepYear>1990 OR IndepYear<=1990;
    
    Testing for NULL
        Explicitly
            x IS NULL
            x IS NOT NULL
        e.g.
            SELECT COUNT(*)
            FROM Country
            WHERE IndepYear>1990 OR IndepYear<=1990 OR IndepYear IS NULL;

Joins
    Inner Joins
        Implicitly:
            SELECT  T1.something, T2.somethingelse
            FROM    Table1 T1, Table2 T2
            WHERE   T1.something = T2.something, ...;
        Alternatively:
            SELECT  T1.something, T2.somethingelse
            FROM    Table1 T1
            INNER JOIN  Table2 T2 ON T1.something = T2.something
            WHERE   ...;
    
    Outer Joins
        Left Outer Join
            SELECT  A, C
            FROM    R LEFT OUTER JOIN S
            ON      R.B = S.B
            A left outer join includes tuples from theleft relation even if 
            there is no match on the right.
            It fills the remaining attributes with NULL.
            e.g.
                select      s.sid, count(r.sid) as reservationcount
                from        sailors s
                left outer join reserves r on s.sid = r.sid
                group by    s.sid

                this results in a table like
                    sid  |  reservationcount
                    22   |  4
                    29   |  0
                    31   |  3

        Other outer joins
            Left
                include the left tuple even if there is no match
                R LEFT OUTER JOIN S ON R.B = S.B    [results: tuples in R]
            Right
                include the right tuple even if there is no match
                R RIGHT OUTER JOIN S ON R.B = S.B   [results: tuples in S]
            Full
                include both left and right tuples even if there is no match
                R FULL OUTER JOIN S ON R.B = S.B    [results: tuple in both S and R]

Views
    Views: a virtual table based on output set of a SQL query.
    A view can be used just like a normal table.
    WITH:
        WITH viewname AS (
            SELECT  ...
            FROM    ...
            WHERE   ...
        )
    CREATE VIEW viewname AS 
        SELECT  ...
        FROM    ...
        WHERE   ...
